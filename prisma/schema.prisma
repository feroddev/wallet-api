generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_SLIP
  BANK_TRANSFER
  PIX
  OTHER
}

enum Plan {
  FREE
  PREMIUM
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurrenceInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PAID
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum RecurrenceType {
  INSTALLMENT
  RECURRING
}

model User {
  id                     String        @id @default(uuid())
  name                   String
  email                  String        @unique
  password               String
  plan                   Plan          @default(FREE)
  createdAt              DateTime      @default(now()) @map("created_at")
  subscriptionExpiration DateTime?     @map("subscription_expiration")
  creditCards            CreditCard[]
  transactions           Transaction[]
  userPlan               UserPlan[]

  @@map("users")
}

model Transaction {
  id                  String              @id @default(uuid())
  userId              String              @map("user_id")
  categoryId          String              @map("category_id")
  name                String
  type                TransactionType     @map("type")
  description         String?
  paymentMethod       PaymentMethod       @map("payment_method")
  date                DateTime            @map("date")
  totalAmount         Decimal             @db.Money
  isSplitOrRecurring  Boolean             @default(false) @map("is_split_or_recurring")
  creditCardId        String?             @map("credit_card_id")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  category            Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creditCard          CreditCard?         @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  splitsOrRecurrences SplitOrRecurrence[]

  @@index([userId, date], name: "idx_user_date")
  @@map("transactions")
}

model SplitOrRecurrence {
  id                String         @id @default(uuid())
  transactionId     String         @map("transaction_id")
  creditCardId      String?        @map("credit_card_id")
  type              RecurrenceType
  installmentNumber Int?           @map("installment_number")
  amount            Decimal        @db.Money
  totalInstallments Int?           @map("total_installments")
  dueDate           DateTime       @map("due_date")
  paymentStatus     PaymentStatus  @default(PENDING) @map("payment_status")
  paidAt            DateTime?      @map("paid_at")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  transaction       Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  creditCard        CreditCard?    @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  @@index([transactionId], name: "idx_transaction_id")
  @@map("split_or_recurrence")
}

model CreditCard {
  id                String              @id @default(uuid())
  userId            String              @map("user_id")
  cardName          String              @map("card_name")
  lastDigits        Int?                @map("last_digits")
  limit             Decimal             @db.Money
  closingDay        Int                 @map("closing_day")
  dueDay            Int                 @map("due_day")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  SplitOrRecurrence SplitOrRecurrence[]

  @@map("credit_cards")
}

model UserPlan {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  plan      Plan
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_plans")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  type         CategoryType
  createdAt    DateTime      @default(now()) @map("created_at")
  transactions Transaction[]

  @@map("categories")
}
