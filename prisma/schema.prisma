generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_SLIP
  BANK_TRANSFER
  PIX
  INVOICE
  OTHER
}

enum Plan {
  FREE
  BASIC
  PREMIUM
}

enum TransactionType {
  INCOME
  EXPENSE
  INVESTMENT
}

enum RecurrenceInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PAID
}

enum CategoryType {
  INCOME
  INVESTMENT
  EXPENSE
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  plan           Plan             @default(FREE)
  createdAt      DateTime         @default(now()) @map("created_at")
  CreditCards    CreditCard[]
  Transactions   Transaction[]
  UserPlan       UserPlan[]
  PendingPayment PendingPayment[]
  Invoice        Invoice[]
  Goal           Goal[]
  BillToPay      BillToPay[]
  Budget         Budget[]

  @@map("users")
}

model Transaction {
  id             String           @id @default(uuid())
  userId         String           @map("user_id")
  categoryId     String           @map("category_id")
  name           String
  type           TransactionType  @map("type")
  description    String?
  paymentMethod  PaymentMethod    @map("payment_method")
  date           DateTime         @map("date")
  totalAmount    Decimal          @db.Money
  isPaid         Boolean          @default(false) @map("is_paid")
  isRecurring    Boolean          @default(false) @map("is_recurring")
  creditCardId   String?          @map("credit_card_id")
  invoiceId      String?          @map("invoice_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creditCard     CreditCard?      @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
  invoice        Invoice?         @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  PendingPayment PendingPayment[]

  @@index([userId, date], name: "idx_user_date")
  @@map("transactions")
}

model CreditCardExpense {
  id                String        @id @default(uuid())
  name              String
  description       String?
  creditCardId      String        @map("credit_card_id")
  categoryId        String        @map("category_id")
  installmentNumber Int           @map("installment_number")
  amount            Decimal       @db.Money
  totalInstallments Int           @map("total_installments")
  dueDate           DateTime      @map("due_date")
  date              DateTime      @map("date")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paidAt            DateTime?     @map("paid_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  creditCard        CreditCard    @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  category          Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("credit_card_expenses")
}

model CreditCard {
  id                String              @id @default(uuid())
  userId            String              @map("user_id")
  cardName          String              @map("card_name")
  lastDigits        Int?                @map("last_digits")
  limit             Decimal             @db.Money
  closingDay        Int                 @map("closing_day")
  dueDay            Int                 @map("due_day")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  SplitOrRecurrence CreditCardExpense[]
  Transaction       Transaction[]
  Invoice           Invoice[]

  @@map("credit_cards")
}

model UserPlan {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  plan      Plan
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_plans")
}

model Category {
  id                String              @id @default(uuid())
  name              String
  type              CategoryType
  createdAt         DateTime            @default(now()) @map("created_at")
  transactions      Transaction[]
  PendingPayment    PendingPayment[]
  CreditCardExpense CreditCardExpense[]

  @@map("categories")
}

model Invoice {
  id           String        @id @default(uuid())
  userId       String        @map("user_id")
  creditCardId String        @map("credit_card_id")
  month        Int
  year         Int
  totalAmount  Decimal       @map("total_amount") @db.Money
  isPaid       Boolean       @default(false) @map("is_paid")
  paidAt       DateTime?     @map("paid_at")
  dueDate      DateTime      @map("due_date")
  closingDate  DateTime      @map("closing_date")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditCard   CreditCard    @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([creditCardId, month, year])
  @@map("invoices")
}

model Budget {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  category  String
  limit     Decimal  @db.Money
  month     Int
  year      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, month, year])
  @@map("budgets")
}

model BillToPay {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  name          String
  description   String?
  amount        Decimal   @db.Money
  dueDate       DateTime  @map("due_date")
  isPaid        Boolean   @default(false) @map("is_paid")
  paidAt        DateTime? @map("paid_at")
  isRecurring   Boolean   @default(false) @map("is_recurring")
  recurrenceDay Int?      @map("recurrence_day")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bills_to_pay")
}

model Goal {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  description String?
  targetValue Decimal  @map("target_value") @db.Money
  savedValue  Decimal  @default(0) @map("saved_value") @db.Money
  deadline    DateTime @map("deadline")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model PendingPayment {
  id            String         @id @default(uuid())
  userId        String         @map("user_id")
  name          String
  description   String?        @map("description")
  categoryId    String         @map("category_id")
  totalAmount   Decimal        @db.Money
  dueDate       DateTime       @map("due_date")
  status        PaymentStatus  @default(PENDING) @map("status")
  paymentMethod PaymentMethod? @map("payment_method")
  paidAt        DateTime?      @map("paid_at")
  transactionId String?        @map("transaction_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transaction   Transaction?   @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@map("pending_payments")
}
