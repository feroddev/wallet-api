generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  name                   String
  email                  String        @unique
  password               String
  plan                   Plan          @default(FREE)
  createdAt              DateTime      @default(now()) @map("created_at")
  subscriptionExpiration DateTime?     @map("subscription_expiration")
  creditCards            CreditCard[]
  transactions           Transaction[]

  @@map("users")
}

model Transaction {
  id                 String              @id @default(uuid())
  userId             String              @map("user_id")
  categoryId         String              @map("category_id")
  description        String
  paymentMethod      PaymentMethod       @map("payment_method")
  transactionDate    DateTime            @map("transaction_date")
  totalAmount        Decimal             @db.Money
  isInstallment      Boolean             @default(false) @map("is_installment")
  totalInstallments  Int?                @map("total_installments")
  creditCardId       String?             @map("credit_card_id")
  isRecurring        Boolean             @default(false) @map("is_recurring")
  recurrenceInterval RecurrenceInterval? @map("recurrence_interval")
  recurrenceStart    DateTime?           @map("recurrence_start")
  recurrenceEnd      DateTime?           @map("recurrence_end")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  installments       Installment[]
  category           Category            @relation(fields: [categoryId], references: [id])
  creditCard         CreditCard?         @relation(fields: [creditCardId], references: [id])
  user               User                @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Installment {
  id                String        @id @default(uuid())
  transactionId     String        @map("transaction_id")
  installmentNumber Int           @map("installment_number")
  amount            Decimal       @db.Money
  dueDate           DateTime      @map("due_date")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paidAt            DateTime?     @map("paid_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  transaction       Transaction   @relation(fields: [transactionId], references: [id])

  @@map("installments")
}

model CreditCard {
  id           String        @id @default(uuid())
  userId       String        @map("user_id")
  cardName     String        @map("card_name")
  limit        Decimal       @db.Money
  closingDay   Int           @map("closing_day")
  dueDay       Int           @map("due_day")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("credit_cards")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  type         CategoryType
  createdAt    DateTime      @default(now()) @map("created_at")
  transactions Transaction[]

  @@map("categories")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_SLIP
  BANK_TRANSFER
  PIX
  OTHER
}

enum Plan {
  FREE
  PREMIUM
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurrenceInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PAID
}

enum CategoryType {
  INCOME
  EXPENSE
}
